package uk.gov.justice.digital.hmpps.jobsboardintegrationapi.jobs.domain

import uk.gov.justice.digital.hmpps.jobsboardintegrationapi.employers.domain.Employer
import java.time.Instant
import java.time.LocalDate

data class Job(
  var id: String,
  val title: String,
  val sector: String,
  val industrySector: String,
  val numberOfVacancies: Int,
  val sourcePrimary: String,
  val sourceSecondary: String? = null,
  val charityName: String? = null,
  val postcode: String,
  val salaryFrom: Float,
  val salaryTo: Float? = null,
  val salaryPeriod: String,
  val additionalSalaryInformation: String? = null,
  val isPayingAtLeastNationalMinimumWage: Boolean,
  val workPattern: String,
  val hoursPerWeek: String,
  val contractType: String,
  val baseLocation: String? = null,
  val essentialCriteria: String,
  val desirableCriteria: String? = null,
  val description: String,
  val offenceExclusions: String,
  val offenceExclusionsDetails: String? = null,
  val isRollingOpportunity: Boolean,
  val closingDate: LocalDate? = null,
  val isOnlyForPrisonLeavers: Boolean,
  val startDate: LocalDate? = null,
  val howToApply: String,
  val supportingDocumentationRequired: String? = null,
  val supportingDocumentationDetails: String? = null,

  val employerId: String,
  val expressionsOfInterest: MutableMap<String, ExpressionOfInterest> = mutableMapOf(),

  var createdAt: Instant? = null,
) {
  private var _employer: Employer? = null

  constructor(
    id: String,
    title: String,
    sector: String,
    industrySector: String,
    numberOfVacancies: Int,
    sourcePrimary: String,
    sourceSecondary: String? = null,
    charityName: String? = null,
    postcode: String,
    salaryFrom: Float,
    salaryTo: Float? = null,
    salaryPeriod: String,
    additionalSalaryInformation: String? = null,
    isPayingAtLeastNationalMinimumWage: Boolean,
    workPattern: String,
    hoursPerWeek: String,
    contractType: String,
    baseLocation: String? = null,
    essentialCriteria: String,
    desirableCriteria: String? = null,
    description: String,
    offenceExclusions: String,
    offenceExclusionsDetails: String? = null,
    isRollingOpportunity: Boolean,
    closingDate: LocalDate? = null,
    isOnlyForPrisonLeavers: Boolean,
    startDate: LocalDate? = null,
    howToApply: String,
    supportingDocumentationRequired: String? = null,
    supportingDocumentationDetails: String? = null,
    employer: Employer,
    expressionsOfInterest: MutableMap<String, ExpressionOfInterest> = mutableMapOf(),
    createdAt: Instant? = null,
  ) : this(
    id = id,
    title = title,
    sector = sector,
    industrySector = industrySector,
    numberOfVacancies = numberOfVacancies,
    sourcePrimary = sourcePrimary,
    sourceSecondary = sourceSecondary,
    charityName = charityName,
    postcode = postcode,
    salaryFrom = salaryFrom,
    salaryTo = salaryTo,
    salaryPeriod = salaryPeriod,
    additionalSalaryInformation = additionalSalaryInformation,
    isPayingAtLeastNationalMinimumWage = isPayingAtLeastNationalMinimumWage,
    workPattern = workPattern,
    hoursPerWeek = hoursPerWeek,
    contractType = contractType,
    baseLocation = baseLocation,
    essentialCriteria = essentialCriteria,
    desirableCriteria = desirableCriteria,
    description = description,
    offenceExclusions = offenceExclusions,
    offenceExclusionsDetails = offenceExclusionsDetails,
    isRollingOpportunity = isRollingOpportunity,
    closingDate = closingDate,
    isOnlyForPrisonLeavers = isOnlyForPrisonLeavers,
    startDate = startDate,
    howToApply = howToApply,
    supportingDocumentationRequired = supportingDocumentationRequired,
    supportingDocumentationDetails = supportingDocumentationDetails,
    employerId = employer.id,
    expressionsOfInterest = expressionsOfInterest,
    createdAt = createdAt,
  ) {
    this.employer = employer
  }

  var employer: Employer?
    get() = _employer
    set(employer) {
      employer?.let { if (employer.id != employerId) throw IllegalArgumentException("Employer ID did not match") }
      _employer = employer
    }

  override fun toString(): String = """
    Job(
        id=$id,
        title=$title,
        sector=$sector,
        industrySector=$industrySector,
        numberOfVacancies=$numberOfVacancies,
        sourcePrimary=$sourcePrimary,
        sourceSecondary=$sourceSecondary,
        charityName=$charityName,
        postcode=$postcode,
        salaryFrom=$salaryFrom,
        salaryTo=$salaryTo,
        salaryPeriod=$salaryPeriod,
        additionalSalaryInformation=$additionalSalaryInformation,
        isPayingAtLeastNationalMinimumWage=$isPayingAtLeastNationalMinimumWage,
        workPattern=$workPattern,
        hoursPerWeek=$hoursPerWeek,
        contractType=$contractType,
        baseLocation=$baseLocation,
        essentialCriteria=$essentialCriteria,
        desirableCriteria=$desirableCriteria,
        description=$description,
        offenceExclusions=$offenceExclusions,
        offenceExclusionsDetails=$offenceExclusionsDetails,
        isRollingOpportunity=$isRollingOpportunity,
        closingDate=$closingDate,
        isOnlyForPrisonLeavers=$isOnlyForPrisonLeavers,
        startDate=$startDate,
        howToApply=$howToApply,
        supportingDocumentationRequired=$supportingDocumentationRequired,
        supportingDocumentationDetails=$supportingDocumentationDetails,
        employer=$employer,
        expressionsOfInterest=$expressionsOfInterest,
        createdAt=$createdAt,
    )
  """.trimIndent()
}
